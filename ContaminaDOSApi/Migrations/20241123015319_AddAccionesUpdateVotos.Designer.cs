// <auto-generated />
using System;
using ContaminaDOSApi.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContaminaDOSApi.Migrations
{
    [DbContext(typeof(ContaminaDosDb))]
    [Migration("20241123015319_AddAccionesUpdateVotos")]
    partial class AddAccionesUpdateVotos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ContaminaDOSApi.Models.Accion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JugadorNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RondaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Valor")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RondaId");

                    b.ToTable("Acciones");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.JuegoContaminaDOS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DecadaActual")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LiderActualId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Psicopata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PuntosCiudadanos")
                        .HasColumnType("int");

                    b.Property<int>("PuntosPsicopatas")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LiderActualId");

                    b.ToTable("Juegos");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Jugador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JuegoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JuegoId");

                    b.ToTable("Jugadores");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Ronda", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fase")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Grupo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntentosDePropuesta")
                        .HasColumnType("int");

                    b.Property<Guid>("JuegoId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("JugadoresQueYaTomaronAccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("JugadoresQueYaVotaron")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JuegoId");

                    b.ToTable("Rondas");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Voto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JugadorNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RondaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Valor")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RondaId");

                    b.ToTable("Votos");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Accion", b =>
                {
                    b.HasOne("ContaminaDOSApi.Models.Ronda", "Ronda")
                        .WithMany("Acciones")
                        .HasForeignKey("RondaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ronda");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.JuegoContaminaDOS", b =>
                {
                    b.HasOne("ContaminaDOSApi.Models.Jugador", "LiderActual")
                        .WithMany()
                        .HasForeignKey("LiderActualId");

                    b.Navigation("LiderActual");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Jugador", b =>
                {
                    b.HasOne("ContaminaDOSApi.Models.JuegoContaminaDOS", "Juego")
                        .WithMany("Jugadores")
                        .HasForeignKey("JuegoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Juego");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Ronda", b =>
                {
                    b.HasOne("ContaminaDOSApi.Models.JuegoContaminaDOS", "Juego")
                        .WithMany("Rondas")
                        .HasForeignKey("JuegoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Juego");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Voto", b =>
                {
                    b.HasOne("ContaminaDOSApi.Models.Ronda", "Ronda")
                        .WithMany("Votos")
                        .HasForeignKey("RondaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ronda");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.JuegoContaminaDOS", b =>
                {
                    b.Navigation("Jugadores");

                    b.Navigation("Rondas");
                });

            modelBuilder.Entity("ContaminaDOSApi.Models.Ronda", b =>
                {
                    b.Navigation("Acciones");

                    b.Navigation("Votos");
                });
#pragma warning restore 612, 618
        }
    }
}
